# -*- coding: utf-8 -*-
"""Copy of BRG-matplotlib-tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kU6aoj8Edughk3yHbAUusoO7YddiS0W3
"""

#Tutorial 1

from matplotlib import pyplot as plt
import numpy as np

#Setting out variables
x = [5,8,10,14]
y = [12,13,6,8]

#Plotting to our canvas
plt.plot(x,y)

#labels
plt.title('My graph')
plt.title('Y axis')
plt.title('X axis')

plt.show

#Tutorial 2
x = [1,2,3,4]
y = [1,4,9,16]
plt.plot(x,y,"go")

x2 = [1,2,3,4]
y2 = [2,2,12,15]
plt.plot(x2,y2,"c")

#Bar graph

divisions = [1,2,3,4]
division_averages = [2,1.5,10,16]
plt.bar(divisions,division_averages, color = "gray", alpha=0.4)

plt.title('My OG Graph')

#set size of points

plt.xlim(0,5)
plt.ylim(0,20)

plt.show()

#Tutorial 3
#Scatter plot
#height = np.array([167,170,149,165,188,190,195,200,215])
#weight = np.array([72,65,68,79,50,60,68,79,81])

#plt.xlim(0,300)
#plt.ylim(0,100)
#plt.scatter(height,weight)
#plt.title('scattered')

from mpl_toolkits import mplot3d

ax = plt.axes(projection = '3d')
ax.scatter3D(height,weight)
ax.set_xlabel("front")
ax.set_ylabel("back")

plt.show()

#BASIC CHALLENGE

#Here is your data

t = np.arange(0.0, 2.0, 0.01)
s = np.sin(2 * np.pi * t)
plt.plot(t,s)
plt.grid()
plt.show()

#INTERMEDIATE CHALLENGE

#Here is your data
N = 5
menMeans = (20, 35, 30, 35, 27)
womenMeans = (25, 32, 34, 20, 25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)
ind = np.arange(N)    # the x locations for the groups
bars = [2, 3, 4, 1, 2,3, 5, 2, 3, 3]
plt.bar(menStd, menMeans,color = "yellow",bottom=menMeans,edgecolor = "white")
plt.bar(womenStd,womenMeans,bottom = womenMeans, color = "gray")
#plt.bar(bars,womenStd)

#NINJA CHALLENGE

#Here is your data
import matplotlib.cbook as cbook
import numpy as np

with cbook.get_sample_data('goog.npz') as datafile:
    price_data = np.load(datafile)['price_data'].view(np.recarray)
price_data = price_data[-250:]  # get the most recent 250 trading days

delta1 = np.diff(price_data.adj_close) / price_data.adj_close[:-1]

volume = (15 * price_data.volume[:-2] / price_data.volume[0])**2
close = 0.003 * price_data.close[:-2] / 0.003 * price_data.open[:-2]